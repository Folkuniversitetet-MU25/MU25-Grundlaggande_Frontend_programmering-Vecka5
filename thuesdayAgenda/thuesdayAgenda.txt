🧭 Workshop – 🚀 JavaScript: Arrayer, Objekt, Operatorer & Villkor

⏰ Tid: ca 3h
📚 Kurs: Grundläggande Frontend-programmering
📅 Vecka 3 – Tisdag 3 sep

--------------------------------------------------
--------------------------------------------------

🎯 Lektionsmål

Efter lektionen ska studenterna kunna:

✅ Skapa och hantera arrayer (index, length, push/pop)
✅ Skapa och hantera objekt (key–value, punktnotation, metoder)
✅ Använda aritmetiska, jämförande och logiska operatorer
✅ Använda if, else if, else för villkor
✅ Förstå truthy/falsy i villkorsuttryck

--------------------------------------------------
--------------------------------------------------

📝 Lektionsplanering (3 timmar)

– PowerPoint & Teori (Slides 27–40)

– Code-Along

– Självständiga övningar

– Reflektion & Q&A

– Sammanfattning & Avslut

- Preview av nästa lektion

--------------------------------------------------
--------------------------------------------------

📢 PowerPoint – Talarmanus (Slides 27–40)

--------------------------------------------------

🟨 Slide 27 – Operatorer
🗣️ “Tre familjer av operatorer vi använder hela tiden:
• Aritmetiska: +, -, *, /, % (räkna på tal).
• Jämförelse: ==, ===, !=, !==, <, >, <=, >= (ger alltid true/false).
• Logiska: && (och), || (eller), ! (inte) för att kombinera villkor.”

--------------------------------------------------

🟨 Slide 28 – Jämföra datatyper (==, ===, typeof)
🗣️ Det finns två sätt: == och ===.

== är lite slarvig. Den konverterar datatyper automatiskt, vilket kan ge oväntade resultat. Till exempel: '1' == 1 blir true.

=== är mer strikt. Den jämför både värde och datatyp. '1' === 1 blir false.

Som regel i professionell kod: använd alltid ===. Då slipper ni konstiga buggar.

Och för att kontrollera vilken datatyp ett värde faktiskt har, använder vi typeof som returnerar en sträng med datatypen: typeof 5 → 'number', typeof '' → 'string', typeof NaN → 'number'.”
"

--------------------------------------------------

🟨 Slide 29 – Villkor
🗣️ Villkor ger oss möjligheten att fatta beslut i koden.
Ett villkor jämför alltid två värden (om vi inte säger annat) och returnerar antingen true eller false.

Exempel: x < 10. Om x är 8 blir resultatet true, annars false.
Testa att köra 1 == '1' – det blir true. Men 1 === '1' blir false.

Så villkor är egentligen bara frågor vi ställer till koden: 'Är det här sant eller falskt?'"

Det här använder vi direkt i if-satser.”

--------------------------------------------------

🟨 Slide 30 – Val (if / else if / else)
🗣️ “Nu kopplar vi ihop villkor med if-satser.
En if-sats säger: 'Om det här är sant, gör det här. Annars, gör något annat.'

Vi kan också kedja: else if (...) för fler grenar. Poängen: skriv läsbara villkor och gör en sak per gren.”

--------------------------------------------------

🟨 Slide 31 – Array/Listor
🗣️ “En array är en lista av värden, till exempel tal, text eller objekt. Index börjar alltid på 0 – alltså första platsen är [0]. Om vi försöker komma åt ett index som inte finns får vi undefined. Vi kan lägga till med push() och ta bort med pop(). Ex: let list = [1, 2, true]; list.push(4); → nu innehåller listan 4 element. list.pop() tar bort sista elementet och returnerar det.”

Array.lengt prata om det!

--------------------------------------------------

🟨 Slide 32 – Objekt
🗣️ “Ett objekt är en samling nyckel–värde-par. Nyckeln är en sträng, värdet kan vara vad som helst – text, tal, array, funktion. Vi kommer åt egenskaper med punktnotation, t.ex. obj.key, eller hakparenteser, t.ex. obj['key']. 

Exempel:
let exampleObject = {
  key: 'value',
  email: 'email@example.com'
};

Här kan vi nå exampleObject.email för att få värdet.”

--------------------------------------------------

🟨 Slide 33 – Objekt (metoder & this)
🗣️ “Det vanligaste sättet att skapa objekt är med object literals – måsvingar {}. Om ett värde i objektet är en funktion kallas det för en metod. Inuti ett objekt kan vi använda this för att referera till objektet självt. Det gör att vi kan nå andra egenskaper i samma objekt från en metod.”

--------------------------------------------------

🟨 Slide 34 – Ändra och kopiera objekt
🗣️ “En av styrkorna med objekt är att vi kan ändra och bygga ut dem dynamiskt.
Vi kan ändra en egenskap, lägga till en ny, eller kopiera objektet.

Exempel:
let o = { title: 'Exempel' }
o.title = 'Modified value'
o.extra = 'New property'

Vi kan också kopiera objekt med spread operatorn:
let copy = { ...o }

Nu får vi en ny inte kopia utan en referens av objektet, och ändringar i kopian påverkar inte originalet."

--------------------------------------------------

🟨 Slide 35 – Scope (introduktion)
🗣️ “Scope betyder var en variabel är synlig/tillgänglig. Vi har global scope (synlig överallt), local scope (inuti en funktion), och block scope (inuti måsvingar). Scope styr hur variabler beter sig och var de kan användas.”

--------------------------------------------------

🟨 Slide 36 – Scope (kodexempel med var)
🗣️ “Här har vi ett exempel med var. var har function scope – inte block scope. Det betyder att variabler kan läcka ut ur block. Fråga till er: vad tror ni skrivs ut här?”

Vi har en global variabel x, och inuti funktionen skapas en ny x.
Den lokala x skuggar den globala, så när vi skriver ut x utanför funktionen, får vi fortfarande det globala värdet.

Vad händer om vi byter var till let?

--------------------------------------------------

🟨 Slide 37 – Scope (förklaring)
🗣️ “Här ser vi svaret: var x = "outside"; gör x global. Inuti funktionen skapas en ny x som bara lever där. Det är därför vi får ‘outside’ i konsolen. Viktigt: let och const har block scope, vilket är säkrare och modernare.”

--------------------------------------------------

🟨 Slide 38 – Exempel Scope
🗣️ "Här ser vi ett exempel där det faktiskt påverkar den globala variabeln.
När vi kör y = 20 utan let eller const, så skriver vi över den globala variabeln.

Det är därför vi ska undvika var och alltid använda let eller const.
Det hjälper oss att undvika oavsiktliga överskrivningar."

Testa med både var och let för att se skillnaden.

--------------------------------------------------

🟨 Slide 39 – Övning (scope & variabeltyper)
🗣️ “Vilket nyckelord skulle ni använda för att deklarera dessa variabler: const eller let? 

Bonus: vilken datatyp tror ni varje variabel har, baserat på namnet? Här tränar vi både scope och typkänsla.”

Diskutera två och två, och sedan kör vi en snabb genomgång tillsammans."

--------------------------------------------------
--------------------------------------------------

💻 Code-Along

📂 Mappstruktur:

mondayAgenda/
  ├── indexCA.html
  └── jsCA/scriptCA.js

indexCA.html 
Genomför den koden

scriptCA.js
Genomför den koden

--------------------------------------------------
--------------------------------------------------

🧠 Självständiga övningar

--------------------------------------------------
--------------------------------------------------

📢 Reflektion & Q&A

- När behövs objekt istället för bara arrayer?

--------------------------------------------------

- Varför är det viktigt att förstå skillnaden mellan == och ===?

--------------------------------------------------

- Har ni stött på situationer där truthy/falsy gav oväntade resultat?

--------------------------------------------------

- Vad kan hända om vi inte förstår skillnaden mellan global och lokal variabel?

--------------------------------------------------
--------------------------------------------------